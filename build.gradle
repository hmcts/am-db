buildscript {
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE")
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

plugins {
    id 'application'
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id 'org.owasp.dependencycheck' version '4.0.2'
    id 'org.sonarqube' version '2.6.2'
}

subprojects {
    apply plugin: 'org.owasp.dependencycheck'
}
allprojects {
    apply plugin: 'org.owasp.dependencycheck'
    // https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
    dependencyCheck {
        // Specifies if the build should be failed if a CVSS score above a specified level is identified.
        // range of 0-10 fails the build, anything greater and it doesn't fail the build
        failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
        suppressionFile = 'config/owasp/suppressions.xml'
        analyzers {
            // Disable scanning of .NET related binaries
            assemblyEnabled = false
        }
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

mainClassName = ''

// tag::repositories[]
repositories {
    mavenLocal()
    jcenter()
    maven {
        url  "https://dl.bintray.com/hmcts/hmcts-maven"
    }
}
// end::repositories[]

group 'uk.gov.hmcts.am'
version '1.0.0-SNAPSHOT'

// tag::jar[]
jar {
    baseName = 'am-db'
    manifest {

        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "am-db"
        property "sonar.projectKey", "am-db"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.jacoco.itReportPath", "${project.buildDir}/jacoco/integration.exec"
        property "sonar.coverage.exclusions", "**/models/**,**/repositories/mappers/**,**/AspectsSuite.java"
    }
}

bootJar {
    archiveName = 'am-db.jar'
}


test {
    useJUnitPlatform()
}

// end::jar[]

// tag::dependencies[]
sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {

    compile('org.springframework.boot:spring-boot-starter-data-jpa') {
        exclude group: 'org.hibernate', module: 'hibernate-core'
        exclude group: 'org.hibernate', module: 'hibernate-entitymanager'
    }
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc') {
        exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    }
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
}
// end::dependencies[]

dependencyManagement {
    dependencies {
        // CVE-2019-0232 - Java and Command Line injections in Windows
        dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.19') {
            entry 'tomcat-embed-core'
            entry 'tomcat-embed-el'
            entry 'tomcat-embed-websocket'
        }
    }
}


compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

compileTestJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}
